{"remainingRequest":"D:\\Desktop\\GuaCyBlog (1)\\GuaCyBlog\\GuaCyBlog-Vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Desktop\\GuaCyBlog (1)\\GuaCyBlog\\GuaCyBlog-Vue\\src\\components\\TagInput.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Desktop\\GuaCyBlog (1)\\GuaCyBlog\\GuaCyBlog-Vue\\src\\components\\TagInput.vue","mtime":1600923573126},{"path":"D:\\Desktop\\GuaCyBlog (1)\\GuaCyBlog\\GuaCyBlog-Vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Desktop\\GuaCyBlog (1)\\GuaCyBlog\\GuaCyBlog-Vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Desktop\\GuaCyBlog (1)\\GuaCyBlog\\GuaCyBlog-Vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Desktop\\GuaCyBlog (1)\\GuaCyBlog\\GuaCyBlog-Vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Desktop\\GuaCyBlog (1)\\GuaCyBlog\\GuaCyBlog-Vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLXRhZyArIC5lbC10YWcgewogbWFyZ2luLWxlZnQ6IDEwcHg7Cn0KLmJ1dHRvbi1uZXctdGFnIHsKIG1hcmdpbi1sZWZ0OiAxMHB4OwogaGVpZ2h0OiAzMnB4OwogbGluZS1oZWlnaHQ6IDMwcHg7CiBwYWRkaW5nLXRvcDogMDsKIHBhZGRpbmctYm90dG9tOiAwOwp9Ci5pbnB1dC1uZXctdGFnIHsKIHdpZHRoOiA5MHB4OwogbWFyZ2luLWxlZnQ6IDEwcHg7CiB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tOwp9Cg=="},{"version":3,"sources":["TagInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TagInput.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n<div>  \r\n  <el-tag\r\n   :key=\"tag\"\r\n   v-for=\"tag in dynamicTags\"\r\n   closable\r\n   :disable-transitions=\"false\"\r\n   @close=\"handleClose(tag)\">\r\n   {{tag}}\r\n  </el-tag>\r\n  <el-input\r\n  class=\"input-new-tag\"\r\n   v-if=\"inputVisible\"\r\n   v-model=\"inputValue\"\r\n   ref=\"saveTagInput\"\r\n   size=\"small\"\r\n   @keyup.enter.native=\"handleInputConfirm\"\r\n   @blur=\"handleInputConfirm\"\r\n  >\r\n   </el-input>\r\n     <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput\">\r\n       + New Tag\r\n    </el-button>\r\n</div>\r\n</template>\r\n\r\n<style>\r\n .el-tag + .el-tag {\r\n  margin-left: 10px;\r\n }\r\n .button-new-tag {\r\n  margin-left: 10px;\r\n  height: 32px;\r\n  line-height: 30px;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n }\r\n .input-new-tag {\r\n  width: 90px;\r\n  margin-left: 10px;\r\n  vertical-align: bottom;\r\n }\r\n</style>\r\n \r\n<script>\r\n export default {\r\n  data() {\r\n   return {\r\n    dynamicTags: ['标签一', '标签二', '标签三'],\r\n    inputVisible: false,\r\n    inputValue: ''\r\n   };\r\n  },\r\n  methods: {\r\n   handleClose(tag) {\r\n    this.dynamicTags.splice(this.dynamicTags.indexOf(tag), 1);\r\n   },\r\n \r\n   showInput() {\r\n    this.inputVisible = true;\r\n    this.$nextTick(_ => {\r\n     this.$refs.saveTagInput.$refs.input.focus();\r\n    });\r\n   },\r\n \r\n   handleInputConfirm() {\r\n    let inputValue = this.inputValue;\r\n    if (inputValue) {\r\n     this.dynamicTags.push(inputValue);\r\n    }\r\n    this.inputVisible = false;\r\n    this.inputValue = '';\r\n   }\r\n  }\r\n }\r\n</script>\r\n<!--\r\n<template>\r\n  <div class=\"muli-tags\" @click='focus'>\r\n    <button class='btn' v-for='(tag, index) in tags' :key='index' @click='delTag(index)'>{{tag}} <span>x</span></button>\r\n    <input type=\"text\"\r\n      ref='input'\r\n\r\n      @keyup.enter=\"add\"\r\n      @keydown.delete=\"del\"\r\n      @keydown.188='split'\r\n      v-model='current'\r\n      >\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    value: Array,\r\n    required: true,\r\n    default: () => []\r\n  },\r\n  methods: {\r\n    focus () {\r\n      this.$refs.input.focus()\r\n    },\r\n    split (e) {\r\n      e.preventDefault()\r\n      this.add(e)\r\n    },\r\n    add (e) {\r\n      const val = e.target.value\r\n      if (!val) return\r\n      if (this.tags.indexOf(val) > -1) return\r\n      this.tags.push(val)\r\n      this.$emit('input', this.tags)\r\n      this.current = ''\r\n    },\r\n    del (e) {\r\n      if (!e.target.value.length) {\r\n        this.tags.pop()\r\n        this.$emit('input', this.tags)\r\n      }\r\n    },\r\n    delTag (index) {\r\n      this.tags.splice(index, 1)\r\n      this.$emit('input', this.tags)\r\n    }\r\n  },\r\n  computed: {\r\n    tags () {\r\n      return this.value.slice()\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      current: ''\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang='less'>\r\n.muli-tags{\r\n  padding: 5px 10px;\r\n  display: block;\r\n  border: 1px solid #ccc;\r\n  input{\r\n    background: transparent;\r\n  }\r\n  .btn{\r\n    margin: 0 5px 3px 0;\r\n    padding: 4px 5px;\r\n    background: #fff;\r\n    border: 1px solid #eee;\r\n    box-shadow:  0 0 4px;\r\n  }\r\n}\r\n</style>\r\n-->"]}]}